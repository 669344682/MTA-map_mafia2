local object = {
{'19_fisherman_home_06', {{-343.9663 ,-917.4722 ,-21.74575 ,0 ,0 ,0},
{-343.9662 ,-828.3138 ,-21.74575 ,0 ,0 ,0},
{-343.9662 ,-942.9908 ,-21.74575 ,0 ,0 ,0},
{-256.4461 ,-933.6284 ,-21.74575 ,0 ,0 ,0},
{-256.1987 ,-888.4216 ,-21.74575 ,0 ,0 ,0},
{-153.3178 ,-953.4406 ,-21.74575 ,0 ,0 ,0},
{-256.5958 ,-840.7439 ,-21.74575 ,0 ,0 ,0},
{-153.318 ,-828.3104 ,-21.74575 ,0 ,0 ,0},
{-153.3206 ,-913.9644 ,-21.74575 ,0 ,0 ,0},
{175.7206 ,-918.2682 ,-21.74567 ,0 ,0 ,0},
{77.37081 ,-935.1538 ,-21.58952 ,0 ,0 ,0},
{115.4434 ,-791.7701 ,-21.82005 ,0 ,0 ,-90},
{115.1604 ,-800.4194 ,-21.82005 ,0 ,0 ,90},}, 0},
{'19_small_craine_01', {{-70.03287 ,-993.7005 ,-15.91641 ,0 ,0 ,0},
{-42.88171 ,-993.7005 ,-15.91641 ,0 ,0 ,0},}, 0},
{'19_pr_05', {{-75.69627 ,-993.875 ,-15.80982 ,0 ,0 ,0},}, 0},
{'19_big_metal_door_02', {{-69.77585 ,-950.9951 ,-17.9217 ,0 ,0 ,0},}, 0},
{'19_parts_2_05', {{-65.80672 ,-884.5572 ,-12.15089 ,90 ,-90 ,90},}, 0},
{'19_parts_2_07', {{-65.80672 ,-774.6443 ,-12.15089 ,90 ,-90 ,90},}, 0},
{'19_long_building_support', {{-65.87644 ,-914.4763 ,-7.696445 ,0 ,0 ,0},}, 0},
{'19_long_building_gate', {{-165.0145 ,-883.7758 ,-7.346318 ,0 ,0 ,0},}, 0},
{'19_18', {{-80.12766 ,-1014.403 ,-13.16297 ,0 ,0 ,0},}, 0},
{'19_long_building_holder', {{-65.80672 ,-1001.707 ,-13.97142 ,0 ,0 ,0},}, 0},
{'19_long_building_walls_big', {{-44.20749 ,-989.0109 ,-12.79449 ,0 ,0 ,0},}, 0},
{'19_long_building_roof_holder', {{-142.5217 ,-996.5101 ,-7.318393 ,0 ,0 ,0},}, 0},
{'19_elevator_engine', {{-65.7591 ,-970.8748 ,-15.32468 ,0 ,0 ,0},}, 0},
{'19_elevator', {{-65.7591 ,-970.8748 ,-9.737484 ,0 ,0 ,0},}, 0},
{'19_long_building_ground', {{-62.85075 ,-963.1831 ,-19.18976 ,0 ,0 ,0},}, 0},
{'19_long_building_wall_one', {{-121.56 ,-883.7758 ,-7.346318 ,0 ,0 ,0},}, 0},
{'19_19_long_building_wall_two', {{-121.56 ,-883.7758 ,-7.346318 ,0 ,0 ,0},}, 0},
{'19_long_building_stairs', {{-85.40595 ,-968.837 ,-18.40284 ,0 ,0 ,0},}, 0},
{'19_long_building_gate_2', {{-95.33443 ,-740.0093 ,-16.61482 ,0 ,0 ,0},}, 0},
{'Velka_hala_dilAA', {{-394.9863 ,-769.4208 ,-15.46798 ,90 ,-90 ,90},
{-394.9864 ,-947.1649 ,-15.46819 ,90 ,-90 ,90},
{-394.9862 ,-788.4647 ,-15.46863 ,90 ,-90 ,90},
{-394.9863 ,-820.2047 ,-15.46801 ,90 ,-90 ,90},
{-394.9862 ,-794.8127 ,-15.46853 ,90 ,-90 ,90},
{-394.9864 ,-851.9443 ,-15.46748 ,90 ,-90 ,90},
{-394.9863 ,-813.8567 ,-15.4681 ,90 ,-90 ,90},
{-394.9863 ,-883.6848 ,-15.46801 ,90 ,-90 ,90},
{-394.9863 ,-877.3368 ,-15.4681 ,90 ,-90 ,90},
{-394.9863 ,-921.7727 ,-15.46801 ,90 ,-90 ,90},
{-394.9863 ,-915.4247 ,-15.4681 ,90 ,-90 ,90},}, 0},
{'Velka_hala_dilBB', {{-394.9863 ,-769.4208 ,-15.46798 ,90 ,-90 ,90},
{-394.9863 ,-959.8611 ,-15.46797 ,90 ,-90 ,90},
{-394.9863 ,-864.6413 ,-15.46756 ,90 ,-90 ,90},
{-394.9863 ,-883.6856 ,-15.46798 ,90 ,-90 ,90},
{-394.9863 ,-890.033 ,-15.46767 ,90 ,-90 ,90},
{-394.9864 ,-896.3817 ,-15.46808 ,90 ,-90 ,90},
{-394.9864 ,-902.7289 ,-15.46777 ,90 ,-90 ,90},
{-394.9862 ,-921.7729 ,-15.46749 ,90 ,-90 ,90},
{-394.9863 ,-947.165 ,-15.46767 ,90 ,-90 ,90},
{-394.9863 ,-858.2934 ,-15.46798 ,90 ,-90 ,90},
{-394.9865 ,-851.9446 ,-15.46715 ,90 ,-90 ,90},
{-394.9863 ,-801.1609 ,-15.46777 ,90 ,-90 ,90},
{-394.9862 ,-794.8131 ,-15.4686 ,90 ,-90 ,90},
{-394.9862 ,-775.769 ,-15.46829 ,90 ,-90 ,90},
{-394.9865 ,-839.2486 ,-15.46715 ,90 ,-90 ,90},
{-394.9864 ,-832.9008 ,-15.46746 ,90 ,-90 ,90},
{-394.9864 ,-826.553 ,-15.46777 ,90 ,-90 ,90},
{-394.9863 ,-820.2051 ,-15.46808 ,90 ,-90 ,90},}, 0},
{'Velka_hala_dil37', {{-303.7376 ,-633.6713 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-652.7153 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-659.0632 ,-10.09067 ,0 ,0 ,0},
{-303.7376 ,-678.1072 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-684.4553 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-716.1954 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-741.5874 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-747.9354 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-779.6755 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-786.0235 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-811.4155 ,-10.09076 ,0 ,0 ,0},}, 0},
{'Velka_hala_dil36', {{-303.7376 ,-633.6713 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-640.0193 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-659.0631 ,-10.09058 ,0 ,0 ,0},
{-303.7376 ,-665.4113 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-684.4554 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-690.8035 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-697.1516 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-703.4996 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-716.1957 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-722.5438 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-728.8918 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-747.9359 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-754.284 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-760.632 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-766.98 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-786.0242 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-811.4163 ,-10.09076 ,0 ,0 ,0},
{-303.7376 ,-824.1116 ,-10.09076 ,0 ,0 ,0},}, 0},
{'19_guard_house', {{-303.7376 ,-659.0633 ,-10.09076 ,0 ,0 ,0},}, 0},
{'19_JMspodek11', {{-266.5388 ,-948.095 ,-20.22987 ,0 ,0 ,0},
{-163.3344 ,-888.8333 ,-20.22987 ,0 ,0 ,0},
{-353.9953 ,-896.379 ,-20.22991 ,0 ,0 ,0},
{-333.9734 ,-819.5643 ,-20.22994 ,0 ,0 ,-180},
{-143.3175 ,-812.0076 ,-20.22993 ,0 ,0 ,-180},
{-246.4984 ,-871.2695 ,-20.22993 ,0 ,0 ,-180},}, 0},
{'19_JVspodek06', {{93.54789 ,-865.6231 ,-19.44391 ,0 ,0 ,0},
{60.87555 ,-930.0438 ,-19.50017 ,0 ,0 ,0},}, 0},
{'19_wooden_parts34', {{193.1691 ,-971.0052 ,-21.88694 ,0 ,0 ,0},}, 0},
{'19_majak', {{225.3815 ,-1033.782 ,-21.7242 ,0 ,0 ,0},}, 0},
{'19_big_boat_06', {{107.7617 ,-893.2328 ,-14.30999 ,0 ,0 ,0},}, 0},
{'19_big_boat_00', {{-386.4196 ,-832.1509 ,-9.516294 ,0 ,0 ,0},
{-214.3694 ,-853.5018 ,-9.516294 ,0 ,0 ,-180},
{-134.2888 ,-901.8874 ,-4.504406 ,0 ,0 ,-180},
{-91.87547 ,-886.9706 ,-4.504406 ,0 ,0 ,-180},
{-196.2599 ,-847.807 ,-9.516294 ,0 ,0 ,0},
{-115.8773 ,-937.6262 ,-4.504406 ,0 ,0 ,0},}, 0},
{'19_parts_4_01', {{145.4697 ,-915.4636 ,-22.83248 ,90 ,-90 ,90},}, 0},
}
print(os.date())
function string.split(input, separator)

	if type(input) ~= "string" then error("type mismatch in argument #1", 3) end
	if (separator and type(separator) ~= "string") then error("type mismatch in argument #2", 3) end

	if not separator then
		separator = "%s"
	end
	local t = {}
	local i = 1
	for str in string.gmatch(input, "([^"..separator.."]+)") do
		t[i] = str
		i = i + 1
	end
	return t
end

local pyt_new = "C:\\test\\default_new.txt"
--[[local pyt = "C:\\default.txt"
local file = io.open(pyt, "r")
local file_new = io.open(pyt_new, "w")
local text = ""

for line in io.lines(pyt) do
	if string.find(line, "Material") then
		file_new:write(text.."\n")
		text = string.split(line, " ")[2]
	end

	if string.find(line, "File") then
		text = text.." "..tostring(string.split(line, " ")[2])
	end
end]]

for k,v in ipairs(object) do
	local pyt = "C:\\"..v[1].."(0).obj.mtl"
	local file = io.open(pyt, "r")
	local text = {}

	for line in io.lines(pyt) do
		table.insert(text, line)
	end

	for k,line in ipairs(text) do
		for p in io.lines(pyt_new) do
			local spl = string.split(tostring(p), " ")
			if line == "map_kd "..tostring(spl[1])..".dds" then
				text[k] = "map_kd "..tostring(spl[2])
				break
			end
		end
	end

	file:close()

	local file = io.open(pyt, "w")
	for i,v in ipairs(text) do
		file:write(v.."\n")
	end

	file:close()
end

local file_meta = io.open("C:\\test\\meta.txt", "w")
for k,v in ipairs(object) do
	local pyt = "C:\\"..v[1].."(0).obj"
	local file = io.open(pyt, "r")
	local text = {}

	for line in io.lines(pyt) do
		table.insert(text, line)
	end

	for k,line in ipairs(text) do
		if line == "g mesh" then
			text[k] = "g "..v[1]
		end
	end

	file:close()

	local file = io.open(pyt, "w")
	for i,v in ipairs(text) do
		file:write(v.."\n")
	end

	file:close()

	file_meta:write("<file src='port/"..v[1]..".dff'/>\n")
	file_meta:write("<file src='port/"..v[1]..".col'/>\n")
end

file_meta:close()
print(os.date())
